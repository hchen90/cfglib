<!doctype html>
<html>
<head>
<title>CfgLib-Xml Manual</title>
<meta charset="gb2312">
<style type="text/css">
.titlestyle {
	font-size: 18px;
	font-style: normal;
	line-height: normal;
	font-weight: bold;
	font-variant: normal;
}
.pistyle {
  font-size: 14px;
}
.codestyle {
  font-size: 14px;
  background: #e0e0e0;
  background-color: #e0e0e0;
  margin: 4px 0px 4px 0px;
  color: #000000;
  border: 1px solid #606060;
}
.lnkstyle {
  color: #c0c0c0;
  font-size: 12px;
}
</style>
</head>
<body>
<header role="banner" >
  <hgroup>
    <h1>CfgLib-Xml Manual</h1>
    <h2>CfgLib-Xml is an library for processing XML Document.</h2>
  </hgroup>
</header>
<p align="right">
  <a href="#lang_english" class="lnkstyle">english</a><br>
  <a href="#lang_chinese" class="lnkstyle">ÖÐÎÄ</a>
</p>
<section>
  <article>
    This program is free software: you can redistribute it and/or modify<br>
    it under the terms of the GNU General Public License as published by<br>
    the Free Software Foundation, either version 3 of the License, or<br>
    (at your option) any later version.<br><br>
    This program is distributed in the hope that it will be useful,<br>
    but WITHOUT ANY WARRANTY; without even the implied warranty of<br>
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>
    GNU General Public License for more details.<br><br>
    You should have received a copy of the GNU General Public License<br>
    along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
  </article>
</section>
<hr>
<p align="right" class="lnkstyle">english</a>
<a name="lang_english"></a>
<nav role="navigation" >
  <ul>
    <li><p align="left"><font size="3">APIs Reference</font></p></li>
    <li><a href="#api_init_doc">void* xml_init_document(const char* filename)</a></li>
    <li><a href="#api_free_doc">int xml_free_document(void* handle)</a></li>
    <li><a href="#api_get_text">int xml_get_element_text(void* handle,const char* path,const char* buf,int cb,int mode)</a></li>
    <li><a href="#api_set_text">int xml_set_element_text(void* handle,const char* path,const char* buf,int mode)</a></li>
    <li><a href="#api_get_attr">int xml_get_element_attributes(void* handle,const char* path,const char* name,const char* buf,int cb,int mode)</a></li>
    <li><a href="#api_set_attr">int xml_set_element_attributes(void* handle,const char* path,const char* name,const char* buf,int mode)</a></li>
    <li><a href="#api_up_doc">int xml_update_document(void* handle)</a></li>
    <li><a href="#api_wr_doc">int xml_write_document(void* handle,const char* filename)</a></li>
    <li><a href="#api_node_open">void* xml_node_branch_open(void* handle,const char* path)</a></li>
    <li><a href="#api_node_next">void* xml_node_branch_go_next(void* treenode)</a></li>
    <li><a href="#api_node_previous">void* xml_node_branch_go_previous(void* treenode)</a></li>
    <li><a href="#api_node_child">void* xml_node_branch_go_child(void* treenode)</a></li>
    <li><a href="#api_node_insert">void* xml_node_branch_insert(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</a></li>
    <li><a href="#api_node_insertc">void* xml_node_branch_insert_child(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</a></li>
    <li><a href="#api_node_remove">int xml_node_branch_remove(void* treenode)</a></li>
  </ul>
</nav>
<hr>
<section>
  <article>
  	<div>
  	  <a name="api_init_doc"></a>
  	  <h2 class="titlestyle">void* xml_init_document(const char* filename)</h2>
  	  <p class="pistyle">
  	    this function must been called before other functions.we use this function to initialize some internal data struct,such as tree,stack.<br>
  	    if initialized successful, it'll return a handle.otherwise return 0.
  	    <pre class="codestyle">
  	      void* handle=xml_init_document();
  	      if(handle){
  	        // ...
  	      }
  	    </pre>
  	  </p>
  	</div>
  	<div>
  	  <a name="api_free_doc"></a>
  	  <h2 class="titlestyle">int xml_free_document(void* handle)</h2>
  	  <p class="pistyle">
  	    when you no longer need the XML-tree,using this function to free memory.<br>
  	    this function always return 0.
  	    <pre class="codestyle">
  	      xml_free_document(handle); // this function always return 0.
  	    </pre>
  	  </p>
    </div>
    <div>
      <a name="api_get_text"></a>
      <h2 class="titlestyle">int xml_get_element_text(void* handle,const char* path,const char* buf,int cb,int mode)</h2>
      <p class="pistyle">
        you can use this function to get XML text on an element-node.<br>
        this function could work in two mode ,depend on the parameter ,'mode' .<br>
        if mode is ture ,it'll consider 'handle' is the handle returned by <a href="#api_op_branch">xml_node_branch_open(void* handle,const char* path)</a><br>
        otherwise ,'handle' is returned by <a href="#api_init_doc">xml_init_document(const char*)</a><br>
        if operation is successful,it'll return 1,otherwise return 0.
        <pre class="codestyle">
          // if mode is ture.
          // 'handle' is returned by xml_node_branch_open(void* handle,const char* path).
          // ...
          char buf[260]={0};
          void* node=0;
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(xml_get_element_text(node,0,buf,sizeof(buf),0x0001)){ // we use 0x0001 as ture value.
              printf("%s\n",buf);
            }
          }
          
          // if mode is false.
          // 'handle' is returned by xml_init_document(...).
          // ...
          char buf[260]={0};
          void* handle=0;
          if(handle=xml_init_document("test.xml"))){
            if(xml_get_element_text(handle,"\\element\\section",buf,sizeof(buf),0x0000)){
              printf("%s\n",buf);
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_set_text"></a>
      <h2 class="titlestyle">int xml_set_element_text(void* handle,const char* path,const char* buf,int mode)</h2>
      <p class="pistyle">
        you could use this function to set the text on an elment-node.<br>
        just like the function ,xml_get_element_text(...) ,it'll work in two mode too.<br>
        if operation is successful,it'll return 1.otherwise return 0.
        <pre class="codestyle">
          // use 0x0000 as false value.
          // function will consider handle is the value returned by xml_init_document(...).
          if(xml_set_element_attributes(handle,"\\element\\items\\num","abc","chenxiang",0x0000)){
            printf("done!\n");
          }
          
          // use 0x0001 as ture value.
          // function will consider handle is the value returned by xml_node_branch_open(...).
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(xml_set_element_text(node,0,"something",0x0001)){
              printf("done!\n");
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_get_attr"></a>
      <h2 class="titlestyle">int xml_get_element_attributes(void* handle,const char* path,const char* name,const char* buf,int cb,int mode)</h2>
      <p class="pistyle">
        you could use this function to get the value of an attribute.<br>
        this function support two mode,like xml_get_element_text(...).<br>
        if operation is successful,it'll return 1.otherwise return 0.
        <pre class="codestyle">
          if(xml_get_element_attributes(handle,"\\element\\items\\num","abc",buf,sizeof(buf),0x0000)){
            printf("%s\n",buf);
          }
          // if mode is 1 ,'path' parameter is ignored.
          // 'handle' must been returned by xml_node_branch_open(...)
        </pre>
      </p>
    </div>
    <div>
      <a name="api_set_attr"></a>
      <h2 class="titlestyle">int xml_set_element_attributes(void* handle,const char* path,const char* name,const char* buf,int mode)</h2>
      <p class="pistyle">
        you could use this function to modify the value of an attribute.<br>
        this function support two mode,like xml_get_element_text(...).<br>
        if operation is successful,it'll return 1.otherwise return 0.
        <pre class="codestyle">
          if(xml_set_element_attributes(handle,"\\element\\items\\num","abc",buf,0x0000)){
            printf("%s\n",buf);
          }
          // reference to xml_get_element_attributes(...)
        </pre>
      </p>
    </div>
    <div>
      <a name="api_up_doc"></a>
      <h2 class="titlestyle">int xml_update_document(void* handle)</h2>
      <p class="pistyle">
        using this function to update XML-tree's data into disk.<br>
        this operation will modify original XML document.<br>
        if operation is successful,it'll return 1.otherwise return 0.
        <pre class="codestyle">
          xml_update_document(handle); // 'handle' is returned by xml_init_document(...)
        </pre>
      </p>
    </div>
    <div>
      <a name="api_wr_doc"></a>
      <h2 class="titlestyle">int xml_write_document(void* handle,const char* filename)</h2>
      <p class="pistyle">
        xml_update_document(handle) will modify original file.if you need write XML-tree's data<br>
        to other place,considerring use this function.<br>
        if operation is successful,it'll return 1.otherwise return 0.
        <pre class="codestyle">
          xml_write_document(handle,"/home/cxx/test.xml"); // 'handle' is returned by xml_init_document(...)
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_open"></a>
      <h2 class="titlestyle">void* xml_node_branch_open(void* handle,const char* path)</h2>
      <p class="pistyle">
        you can open a branch's node.and do more operations.<br>
        if successful,it'll return current node.otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){ // specifield path.
            // ...
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_next"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_next(void* treenode)</h2>
      <p class="pistyle">
        goto next node of the branch.<br>
        if successful,it'll return current node.otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_next(node)){ // 'node' is the next node.
              // we located on next node here.
              // ...
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_previous"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_previous(void* treenode)</h2>
      <p class="pistyle">
        goto previous node of the branch.<br>
        if successful,it'll return current node.otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_previous(node)){ // 'node' is the previous node.
              // ...
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_child"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_child(void* treenode)</h2>
      <p class="pistyle">
        goto child's node of the branch.<br>
        if successful,it'll return current node,otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_child(node)){ // 'node' is the node of child ...
              // ...
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_insert"></a>
      <h2 class="titlestyle">void* xml_node_branch_insert(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</h2>
      <p class="pistyle">
        you can insert a new node into current branch.<br>
        if successful,it'll return current node.otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\/test")){ 
            // in this sample,'/test' is the endian tag.
            node=xml_node_branch_insert(node,"insert-sub",0,0,0,0);
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_insertc"></a>
      <h2 class="titlestyle">void* xml_node_branch_insert_child(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</h2>
      <p class="pistyle">
        you can insert a new child's node into current branch.<br>
        if attributes contain several items.using space to divide it,like ( abc="abc" name="ddddd" id="11111111" ).<br>
        if you set 'single' as ture(0x0001),it'll consider this is a single line tag.<br>
        if successful,it'll return current node,otherwise return 0.
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\/test")){
            node=xml_node_branch_insert(node,"insert-sub",0,0,0,0);
            node=xml_node_branch_insert_child(node,"child1","name=\"23\"",1,0,0);
            node=xml_node_branch_insert(node,"child2","name=\"34\" id=\"23333\"",1,0,0);
            node=xml_node_branch_insert(node,"child3","name=\"45\"",1,0,0);
            node=xml_node_branch_insert(node,"/insert-sub",0,0,0,0);
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_remove"></a>
      <h2 class="titlestyle">int xml_node_branch_remove(void* treenode)</h2>
      <p class="pistyle">
        you can remove a node from XML-tree.<br>
        if successful,it'll return 1,otherwise return 0.
        <pre class="codestyle">
          int xml_node_branch_remove(node);
        </pre>
      </p>
    </div>
  </article>
</section>
<hr>
<p align="right" class="lnkstyle">ÖÐÎÄ</a>
<a name="lang_chinese"></a>
<nav role="navigation" >
  <ul>
    <li><p align="left"><font size="3">API²Î¿¼</font></p></li>
    <li><a href="#api_init_doc_cn">void* xml_init_document(const char* filename)</a></li>
    <li><a href="#api_free_doc_cn">int xml_free_document(void* handle)</a></li>
    <li><a href="#api_get_text_cn">int xml_get_element_text(void* handle,const char* path,const char* buf,int cb,int mode)</a></li>
    <li><a href="#api_set_text_cn">int xml_set_element_text(void* handle,const char* path,const char* buf,int mode)</a></li>
    <li><a href="#api_get_attr_cn">int xml_get_element_attributes(void* handle,const char* path,const char* name,const char* buf,int cb,int mode)</a></li>
    <li><a href="#api_set_attr_cn">int xml_set_element_attributes(void* handle,const char* path,const char* name,const char* buf,int mode)</a></li>
    <li><a href="#api_up_doc_cn">int xml_update_document(void* handle)</a></li>
    <li><a href="#api_wr_doc_cn">int xml_write_document(void* handle,const char* filename)</a></li>
    <li><a href="#api_node_open_cn">void* xml_node_branch_open(void* handle,const char* path)</a></li>
    <li><a href="#api_node_next_cn">void* xml_node_branch_go_next(void* treenode)</a></li>
    <li><a href="#api_node_previous_cn">void* xml_node_branch_go_previous(void* treenode)</a></li>
    <li><a href="#api_node_child_cn">void* xml_node_branch_go_child(void* treenode)</a></li>
    <li><a href="#api_node_insert_cn">void* xml_node_branch_insert(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</a></li>
    <li><a href="#api_node_insertc_cn">void* xml_node_branch_insert_child(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</a></li>
    <li><a href="#api_node_remove_cn">int xml_node_branch_remove(void* treenode)</a></li>
  </ul>
</nav>
<hr>
<section>
  <article>
    <div>
      <a name="api_init_doc_cn"></a>
      <h2 class="titlestyle">void* xml_init_document(const char* filename)</h2>
      <p class="pistyle">
        ÔÚÊ¹ÓÃ±¾¿âº¯ÊýÇ°£¬±ØÐëÏÈµ÷ÓÃ´Ëº¯ÊýÒ»Íê³ÉÒ»Ð©³õÊ¼»¯µÄ¹¤×÷¡£<br>
        ±ÈÈç´´½¨XMLÊ÷£¬ºÍÕ»½á¹¹¡£<br>
        ³É¹¦·µ»ØXMLµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          void* handle=xml_init_document();
          if(handle){
            // ...
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_free_doc_cn"></a>
      <h2 class="titlestyle">int xml_free_document(void* handle)</h2>
      <p class="pistyle">
        µ±Äã²»ÔÙÐèÒªÔÚXMLÊ÷ÖÐ´æ´¢Êý¾ÝÊ±£¬Ê¹ÓÃÕâ¸öº¯ÊýÀ´ÊÍ·ÅÄÚ´æ¡£<br>
        Õâ¸öº¯Êý×Ü·µ»Ø0¡£
        <pre class="codestyle">
          xml_free_document(handle); // Õâ¸öº¯ÊýÓÀÔË·µ»Ø0.
        </pre>
      </p>
    </div>
    <div>
      <a name="api_get_text_cn"></a>
      <h2 class="titlestyle">int xml_get_element_text(void* handle,const char* path,const char* buf,int cb,int mode)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔÓÃÕâ¸öº¯ÊýÀ´»ñÈ¡XMLÎÄµµÖÐµÄÔªËØµÄÎÄ±¾ÐÅÏ¢¡£<br>
        ´Ëº¯Êý¿ÉÒÔÓÐÁ½ÖÖ¹¤×÷Ä£Ê½£¬¾ßÌåÈ¡¾öÓëº¯ÊýµÄmode²ÎÊý¡£<br>
        Èç¹ûmodeÎªÕæÖµ£¨Èç£º1£©£¬º¯Êý»áÈÏÎªhandleÊÇ<a href="#api_node_open_cn">xml_node_branch_open(...)</a>·µ»ØµÄÖµ£¬<br>
        º¯Êý²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          // Èç¹ûmodeÎªÕæÖµ
          // 'handle' ÊÇxml_node_branch_open(void* handle,const char* path)·µ»ØµÄÖµ
          // ...
          char buf[260]={0};
          void* node=0;
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(xml_get_element_text(node,0,buf,sizeof(buf),0x0001)){ // we use 0x0001 as ture value.
              printf("%s\n",buf);
            }
          }
          
          // Èç¹ûmodeÎª¼ÙÖµ
          // 'handle' ÊÇxml_init_document(...)·µ»ØµÄÖµ
          // ...
          char buf[260]={0};
          void* handle=0;
          if(handle=xml_init_document("test.xml"))){
            if(xml_get_element_text(handle,"\\element\\section",buf,sizeof(buf),0x0000)){
              printf("%s\n",buf);
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_set_text_cn"></a>
      <h2 class="titlestyle">int xml_set_element_text(void* handle,const char* path,const char* buf,int mode)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔÓÃÕâ¸öº¯ÊýÀ´ÐÞ¸ÄXMLÎÄµµÖÐ½ÚµãµÄÎÄ±¾¡£<br>
        ÓÃ·¨Í¬xml_get_element_text(...)<br>
        ²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          // use 0x0000 as false value.
          // º¯Êý½«ÈÏÎªÊÇ xml_init_document(...)·µ»ØµÄÖµ
          if(xml_set_element_attributes(handle,"\\element\\items\\num","abc","chenxiang",0x0000)){
            printf("done!\n");
          }
          
          // use 0x0001 as ture value.
          // º¯Êý½«ÈÏÎªÊÇ xml_node_branch_open(...)·µ»ØµÄÖµ
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(xml_set_element_text(node,0,"something",0x0001)){
              printf("done!\n");
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_get_attr_cn"></a>
      <h2 class="titlestyle">int xml_get_element_attributes(void* handle,const char* path,const char* name,const char* buf,int cb,int mode)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔÓÃÕâ¸öº¯ÊýµÃµ½½ÚµãÖÐÄ³¸öÊôÐÔµÄÖµ¡£<br>
        ÓÃ·¨Í¬ xml_get_element_text(...)£¬<br>
        ²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò0¡£
        <pre class="codestyle">
          if(xml_get_element_attributes(handle,"\\element\\items\\num","abc",buf,sizeof(buf),0x0000)){
            printf("%s\n",buf);
          }
          // Èç¹ûmodeÎªÕæ ,'path'²ÎÊý½«±»ºöÂÔ£¬ÓÃÀ´´ò¿ªÓÉxml_node_branch_open(...)·µ»ØµÄÖ¸Õë
          // 'handle' ±ØÐëÊÇÓÉxml_node_branch_open(...)·µ»ØµÄÖµ
        </pre>
      </p>
    </div>
    <div>
      <a name="api_set_attr_cn"></a>
      <h2 class="titlestyle">int xml_set_element_attributes(void* handle,const char* path,const char* name,const char* buf,int mode)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔÓÃÕâ¸öº¯ÊýÐÞ¸Ä½ÚµãÖÐÄ³¸öÊôÐÔµÄÖµ¡£<br>
        ÓÃ·¨Í¬ xml_get_element_text(...)£¬<br>
        ²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò0¡£
        <pre class="codestyle">
          if(xml_set_element_attributes(handle,"\\element\\items\\num","abc",buf,0x0000)){
            printf("%s\n",buf);
          }
          // ²Î¿¼ xml_get_element_attributes(...)
        </pre>
      </p>
    </div>
    <div>
      <a name="api_up_doc_cn"></a>
      <h2 class="titlestyle">int xml_update_document(void* handle)</h2>
      <p class="pistyle">
        ÓÃÕâ¸öº¯Êý°ÑÕû¸öXMLÊ÷Ð´µ½´ÅÅÌÉÏ¡£<br>
        ´Ë²Ù×÷»áÐÞ¸ÄÔ­À´µÄXMLÎÄµµ¡£<br>
        ²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò0.
        <pre class="codestyle">
          xml_update_document(handle); // 'handle' ÓÉxml_init_document(...)·µ»Ø
        </pre>
      </p>
    </div>
    <div>
      <a name="api_wr_doc_cn"></a>
      <h2 class="titlestyle">int xml_write_document(void* handle,const char* filename)</h2>
      <p class="pistyle">
        xml_update_document(...)»áÐÞ¸ÄÔ­À´µÄXMLÎÄµµ£¬<br>
        Èç¹ûÐèÒª½«XMLÊ÷Ð´µ½ÆäËûµÄÎÄ¼þÖÐ£¬¿ÉÒÔÊ¹ÓÃÕâ¸öº¯Êý¡£<br>
        ²Ù×÷³É¹¦·µ»Ø1£¬·ñÔò0¡£
        <pre class="codestyle">
          xml_write_document(handle,"/home/cxx/test.xml"); // 'handle' ÓÉxml_init_document(...)·µ»Ø
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_open_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_open(void* handle,const char* path)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔ´ò¿ªÒ»¸öXMLÊ÷ÉÏµÄ½Úµã£¨Ö¦£©À´×ö¸ü¶àµØ²Ù×÷¡£<br>
        ³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){ // Ö¸¶¨pathÂ·¾¶
            // ...
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_next_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_next(void* treenode)</h2>
      <p class="pistyle">
        ÒÆµ½ÏÂÒ»¸ö½ÚµãµÄÖ¦ÉÏ¡£<br>
        ³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_next(node)){ // 'node'ÊÇÏÂÒ»¸ö½Úµã
              // ...
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_previous_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_previous(void* treenode)</h2>
      <p class="pistyle">
        ÒÆµ½ÉÏÒ»¸ö½ÚµãµÄÖ¦ÉÏ¡£<br>
        ³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_previous(node)){ // 'node'ÊÇÉÏÒ»¸ö½Úµã
              // ...
            }
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_child_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_go_child(void* treenode)</h2>
      <p class="pistyle">
	ÒÆµ½×Ó½ÚµãµÄÖ¦ÉÏ¡£<br>
	³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
	<pre class="codestyle">
	  if(node=xml_node_branch_open(handle,"\\element\\items\\abcdefg")){
            if(node=xml_node_branch_go_child(node)){
              // ...
            }
          }
	</pre>
      </p>
    </div>
    <div>
      <a name="api_node_insert_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_insert(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔ²åÈëÒ»¸öÐÂµÄ½Úµãµ½XMLÊ÷ÖÐ¡£<br>
        Èç¹ûÄã½«¡®single¡¯ÉèÖÃÎªÕæÖµ£¬½«×÷Îªµ¥ÐÐ±ê¼Ç¡£<br>
        ³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\/test")){ 
            // ÔÚ´úÂëÖÐ ,'/test' ÊÇ½áÎ²±ê¼Ç
            node=xml_node_branch_insert(node,"insert-sub",0,0,0,0);
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_insertc_cn"></a>
      <h2 class="titlestyle">void* xml_node_branch_insert_child(void* treenode,const char* tag,const char* attributes,int single,const char* text,const char* comment)</h2>
      <p class="pistyle">
        Äã¿ÉÒÔ²åÈëÒ»¸ö×Ó½Úµãµ½XMLÊ÷ÖÐ¡£<br>
        ÊôÐÔÖÐµÄ×Ö·û´®°üº¬¶à¸öÏñ£¬ÓÃ¿Õ¸ñ¼ü·Ö¿ª£¬¾ÍÏñÕâÑù£¨ abc="abc" name="ddddd" id="11111111"£©¡£<br>
        ³É¹¦·µ»Ø½ÚµãµÄÖ¸Õë£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          if(node=xml_node_branch_open(handle,"\\element\\/test")){
            node=xml_node_branch_insert(node,"insert-sub",0,0,0,0);
            node=xml_node_branch_insert_child(node,"child1","name=\"23\"",1,0,0);
            node=xml_node_branch_insert(node,"child2","name=\"34\" id=\"23333\"",1,0,0);
            node=xml_node_branch_insert(node,"child3","name=\"45\"",1,0,0);
            node=xml_node_branch_insert(node,"/insert-sub",0,0,0,0);
          }
        </pre>
      </p>
    </div>
    <div>
      <a name="api_node_remove_cn"></a>
      <h2 class="titlestyle">int xml_node_branch_remove(void* treenode)</h2>
      <p class="pistyle">
        ÓÃÕâ¸öº¯Êý¿ÉÒÔ´ÓXMLÊ÷ÖÐÉ¾³ýÒ»¸ö½Úµã¡£<br>
        ³É¹¦·µ»Ø1£¬·ñÔò·µ»Ø0¡£
        <pre class="codestyle">
          int xml_node_branch_remove(node);
        </pre>
      </p>
    </div>
  </article>
</section>
<footer role="contentinfo" > 
<br><font size="2"><i>copyright&copy;2014 Hsiang Chen</i></font>
</footer>
</body>
</html>
